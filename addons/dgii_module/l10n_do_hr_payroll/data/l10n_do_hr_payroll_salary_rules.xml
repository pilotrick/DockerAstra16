<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="0">

        <record id="l10n_do_hr_payroll.hr_payroll_structure_base" model="hr.payroll.structure">
            <field name="name">Nómina de Empleados Internos</field>
            <field name="type_id" ref="hr_contract.structure_type_employee" />
        </record>

        <record id="l10n_do_hr_payroll.hr_payroll_structure_out" model="hr.payroll.structure">
            <field name="name">Nómina de Empleados Salida</field>
            <field name="type_id" ref="hr_contract.structure_type_employee" />
        </record>

        <record id="structure_foreign_employees" model="hr.payroll.structure">
            <field name="name">Empleados extranjeros</field>
            <field name="type_id" ref="hr_contract.structure_type_employee"/>
        </record>

        <record id="christmas_salary_structure" model="hr.payroll.structure">
            <field name="name">Doble sueldo</field>
            <field name="type_id" ref="hr_contract.structure_type_employee"/>
        </record>

    </data>

<data>

        <!-- Salary Rules -->
        <record id="hr_payroll_hr_rule_basic" model="hr.salary.rule">
            <field name="name">Salario básico</field>
            <field name="sequence" eval="1" />
            <field name="code">BASIC</field>
            <field name="sequence">1</field>
            <field name="category_id" ref="hr_payroll.BASIC" />
            <field name="amount_select">code</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
<!--             <field name="register_id" ref="hr_payroll.contrib_register_employees"/> -->
            <field name="amount_python_compute">
# beginning of main variables
both_month = bool(contract.scheduled_retentions == 'both_month')
start_month = bool(contract.scheduled_retentions == 'start_month')
end_month = bool(contract.scheduled_retentions == 'end_month')
allow_accumulation = contract.allow_accumulation

if contract.hourly_payment:
    if not payslip.salary_change:
        result = contract.wage * sum([line.number_of_hours for line in payslip.worked_days_line_ids])
    else:
        result = contract.wage
elif payslip.struct_id.schedule_pay == 'bi-weekly':
    if payslip.partial_worked_days:
        result = contract.wage
    else:
        result = contract.wage / 2
else:
    result = contract.wage


impuesto_isr = 0
dependents = 0
if payslip.date_to.day &gt;= 25 and payslip.date_to.day &lt;= 31:
    last_payslip = True
    first_payslip = False
else:
    first_payslip = True
    last_payslip = False

start_date = payslip.date_from
this_slip = payslip.date_to

if payslip.date_to.day &gt;= 25 and payslip.date_to.day &lt;= 31:
    start_date = payslip.date_from.replace(day=1)

if contract.schedule_form_pay == 'weekly':
    days_division = 5.5
    payment_division = 4
    result = contract.wage / payment_division

elif contract.schedule_form_pay == 'bi-monthly':
    days_division = 11.915
    payment_division = 2
    result = contract.wage / payment_division
else:
    days_division = 23.83
    payment_division = 1
    result = contract.wage / payment_division
amount_to_pay = contract.wage / payment_division

if bool(inputs.REAL and inputs.REAL.amount):
    amount_to_pay = (inputs.REAL and inputs.REAL.amount)
elif bool(inputs.DLAB and inputs.DLAB.amount):
    amount_to_pay = (amount_to_pay / days_division) * inputs.DLAB.amount
else:
    amount_to_pay = amount_to_pay


            </field>
            <field name="note">Todo lo detallado a continuación queda fuera del salario ordinario o salario computable a los fines de cálculo y pago de prestaciones laborales: 
• Horas extras, según el Art. 85 del CT;
• Propina en hoteles y restaurantes, según el Art. 197 del CT;
• Salario de Navidad, según el Art. 219 del CT;
• Participación en las utilidades de la empresa, según la jurisprudencia (SCJ 7 Ago. 1956, B. J. 555, Pág. 1607; SCJ 9 Oct. 1991, B.J. 971, Pág. 1413);
• Incentivo gerencial anual, bono anual, o cualquier pago que se hace una vez por año, según la jurisprudencia (3º SCJ 18 Ago. 1999, B. J. 1065, Pág. 591);
• Viáticos y reembolso de gastos que estén soportados con la evidencia de que son auténticamente gastos en la ejecución del servicio prestado, según la jurisprudencia (SCJ 9 Mar. 1984, B. J. 880, Pág. 585; 3º SCJ 14 Jun 2000, B. J. 1075, Pág. 631);
• Uniformes, útiles y herramientas de trabajo, según la jurisprudencia (3º SCJ 29 May. 2002, B. J. 1098, Pág. 815); y
• Subsidios de la seguridad social por enfermedad, accidentes o maternidad, según la jurisprudencia (SCJ 22 Dic 1971, B. J. 733, Pág. 3439).

En cambio, sí forman parte del salario ordinario, además del sueldo fijo:
• Las comisiones pagadas regularmente, según el Art. 311 del CT;
• Cualquier salario por rendimiento pagado regularmente, bajo distintas denominaciones tales como incentivos, bonos de producción, etc., según la jurisprudencia (3º SCJ 7 Oct. 1998, B. J. 1055, Pág. 458);
• Montos fijos por mantenimiento de vehículo, según la jurisprudencia (3º SCJ 1 May. 1999, B. J. 1062, Pág. 681);
• Dietas, rentas y alimentación del trabajador, que se otorguen con carácter permanente, según la jurisprudencia (SCJ 9 Mar. 1984, B. J. 880, Pág. 585; 3º SCJ 14 Jun. 2000, B. J. 1075, Pág. 631); y
• Bonos y primas por el costo de vida y alquiler de vivienda (3º SCJ 22 May. 2002, B. J. 1098, Pág. 718).
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_base" model="hr.salary.rule">
            <field name="name">Salario a Pagar</field>
            <field name="sequence" eval="1" />
            <field name="code">APAGAR</field>
            <field name="condition_select">python</field>
            <field name="condition_python">result = not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary))</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_ordinary_salary"/>
            <field name="sequence">2</field>
            <field name="amount_select">code</field>
            <field name="account_debit" search="[('code', '=', '61010100')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="appears_on_payslip" eval="True"/>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
<!--             <field name="register_id" ref="hr_payroll.contrib_register_employees"/> -->
            <field name="amount_python_compute">
if bool(inputs.REAL and inputs.REAL.amount):
    result = (inputs.REAL and inputs.REAL.amount) + categories.DDS
elif bool(inputs.DLAB and inputs.DLAB.amount):
    result = ((contract.wage / contract.payment_day) + categories.DDS) * inputs.DLAB.amount
    #result_qty = inputs.DLAB.amount
else:
    result = amount_to_pay + categories.DDS

# BASIC / 30 
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_commissions" model="hr.salary.rule">
            <field name="name">Comisiones</field>
            <field name="sequence" eval="1"/>
            <field name="code">COM</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_ordinary_salary"/>
            <field name="sequence">11</field>
            <field name="account_debit" search="[('code', '=', '61010600')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="condition_select">python</field>
            <field name="condition_python">sales_commision = inputs.COMV and inputs.COMV.amount
collection_commision = inputs.COMC and inputs.COMC.amount

inputs_commision = sales_commision  + collection_commision

result = bool(sales_commision or collection_commision)</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True"/>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
<!--             <field name="register_id" ref="hr_payroll.contrib_register_employees"/> -->
            <field name="amount_python_compute">if inputs_commision &gt; 1:
    result = inputs_commision
else:
    result = 0
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_taxable_amounts" model="hr.salary.rule">
            <field name="name">Otras Remuneraciones</field>
            <field name="sequence" eval="1" />
            <field name="code">OREM</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_calculated_amount" />
            <field name="sequence">1</field>
            <field name="condition_select">python</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">
taxable_playslip = categories.OREM
taxable_accumulation = payslip.sum_category('OREM', start_date, this_slip)
taxable_amount = taxable_playslip + taxable_accumulation
result = bool(taxable_amount) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))
            </field>

            <field name="amount_python_compute">taxable_playslip = categories.OREM
result = taxable_amount
            </field>
        </record>


        <record id="l10n_do_hr_payroll.hr_rule_incentives" model="hr.salary.rule">
            <field name="name">Incentivos</field>
            <field name="sequence" eval="1" />
            <field name="code">INC</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_taxable_alw" />
            <field name="sequence">12</field>
            <field name="account_debit" search="[('code', '=', '61011200')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.INC and inputs.INC.amount) and not bool(payslip.payslip_run_id.is_christmas_salary)</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = (inputs.INC and inputs.INC.amount)
            </field>
        </record>


            <record id="l10n_do_hr_payroll.hr_rule_vacations_paid" model="hr.salary.rule">
             <field name="name">Vaciones Pagadas</field>
            <field name="sequence" eval="1" />
             <field name="code">PVAC</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_ordinary_salary" />
            <field name="sequence">13</field>
            <field name="condition_select">python</field>
            <field name="condition_python">vacations_days_paid = inputs.PVAC and inputs.PVAC.amount
result = bool(vacations_days_paid) and not bool(payslip.payslip_run_id.is_christmas_salary)</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">total_gain = amount_to_pay
result = (total_gain / days_division) * vacations_days_paid</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_vacations" model="hr.salary.rule">
            <field name="name">Vacaciones</field>
            <field name="sequence" eval="1" />
            <field name="code">VAC</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_ordinary_salary" />
            <field name="sequence">13</field>
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.VAC and inputs.VAC.amount) and not bool(payslip.payslip_run_id.is_christmas_salary)</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">
last_commision = payslip.sum('COM', start_date, this_slip) - (COM if rules.COM else 0)
last_salary = payslip.sum('BASIC', start_date, this_slip) - (BASIC if rules.BASIC else 0)
vacation_salary = (last_salary if last_salary &gt; 0 else BASIC) + last_commision
num_months = (this_slip.year - contract.date_start.year) * 12 + (this_slip.month - contract.date_start.month)
days_to_pay = 18 if num_months &gt;= 60 else 14

result = ((vacation_salary / 23.83) * days_to_pay) - amount_to_pay
            </field>
            <field name="note">MT:
Las vacaciones se calculan dividiendo el importe total del salario devengado en el último
mes entre 23.83 en el caso de la jornada ordinaria o entre 26 en el caso de la jornada
intermitente, y el cociente se multiplicará por los días que le correspondan de vacaciones
al trabajador, conforme lo establecido en los artículos 177 y 180 del Código de Trabajo.

Si el salario es pagado por labor rendida se divide el importe total de los salarios devengados
durante el último año o fracción de año, entre el número de meses trabajados, y el cociente
se dividirá a su vez entre 23.83 en el caso de la jornada ordinaria o entre 26 en el caso de
la jornada intermitente, y este resultado se multiplicará por los días que le correspondan
de vacaciones al trabajador conforme al artículo 177 y 180 del Código de Trabajo.

Art. 180.:
• Trabajadores con más de cinco meses de servicios, seis días
• Trabajadores con más de seis meses de servicios, siete días
• Trabajadores con más de siete meses de servicio, ocho días
• Trabajadores con más de ocho meses de servicio, nueve días
• Trabajadores con más de nueve meses de servicio, diez días
• Trabajadores con más de diez meses de servicios, once días
• Trabajadores con más de once meses de servicios, doce días
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_vacation_bonus" model="hr.salary.rule">
            <field name="name">Bono Vacacional</field>
            <field name="sequence" eval="1" />
            <field name="code">BVAC</field>
            <field name="account_debit" search="[('code', '=', '61010400')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_taxable_alw"/>
            <field name="sequence">13</field>
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.BVAC and inputs.BVAC.amount)</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = (inputs.BVAC and inputs.BVAC.amount)
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_extra_hours_labor" model="hr.salary.rule">
            <field name="name">Horas Extra Laborables (35%)</field>
            <field name="sequence" eval="1" />
            <field name="code">HEL</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_taxable_alw" />
            <field name="sequence">14</field>
            <field name="condition_select">python</field>
            <field name="condition_python">extra_hours = inputs.HEL and inputs.HEL.amount
result = bool(extra_hours)</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">
result = (  ((contract.wage /23.83) / 8) * 1.35)
result_qty = extra_hours
</field>
            <field name="note">
                REGLAS PARA CALCULAR EL VALOR DE HORA DE TRABAJO
• SI EL SALARIO ES MENSUAL: Se divide el sueldo entre “23.83”. Este resultado se divide, a su vez, entre el número
de horas de su jornada normal, ya sea 8 horas; 6 ó 10 si está sujeta a una jornada especial

• SI EL SALARIO ES QUINCENAL: Se divide el sueldo entre “11.91”. Este resultado se divide, a su vez, entre el
número de horas de su jornada normal.

• SI EL SALARIO ES SEMANAL: Se divide el sueldo entre “5.5”. Este resultado se divide, a su vez, entre el número
de hora s de su jornada normal.

• SI EL SALARIO ES DIARIO O POR LABOR RENDIDA: El salario devengado se divide entre el número de
horas de su jornada normal.
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_extra_hours_holiday" model="hr.salary.rule">
            <field name="name">Horas Extra Feriadas (100%)</field>
            <field name="sequence" eval="1" />
            <field name="code">HEF</field>
            <field name="account_debit" search="[('code', '=', '61011300')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_taxable_alw" />
            <field name="sequence">15</field>
            <field name="condition_select">python</field>
            <field name="condition_python">holiday_hours = inputs.HEF and inputs.HEF.amount
result = bool(holiday_hours)</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = ((contract.wage/23.83) / 8) * 2)
result_qty = holiday_hours
            </field>
        </record>


        <record id="l10n_do_hr_payroll.hr_rule_dieta" model="hr.salary.rule">
            <field name="name">Dieta</field>
            <field name="sequence" eval="1" />
            <field name="code">DIETA</field>
            <field name="account_debit" search="[('code', '=', '61010900')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_taxable_alw" />
            <field name="sequence">5</field>
            <field name="condition_select">python</field>
            <field name="condition_python">result =  bool(contract.dieta_amount &gt;= 1) or bool(inputs.DIETA and inputs.DIETA.amount)</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">
if bool(inputs.DIETA and inputs.DIETA.amount):
    dieta_amount = (inputs.REAL and inputs.REAL.amount)
else:
    dieta_amount = contract.dieta_amount  / payment_division
result = dieta_amount</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_extra_night_hours" model="hr.salary.rule">
            <field name="name">Horas Extra Nocturnas (50%)</field>
            <field name="sequence" eval="1" />
            <field name="code">HEN</field>
            <field name="account_debit" search="[('code', '=', '61011300')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_taxable_alw" />
            <field name="sequence">16</field>
            <field name="condition_select">python</field>
            <field name="condition_python">extra_night_hours = inputs.HEN and inputs.HEN.amount
result = bool(extra_night_hours)</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = ((contract.wage/23.83) / 8) * 1.50)
result_qty = extra_night_hours
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_night_hours" model="hr.salary.rule">
            <field name="name">Horas Nocturnas (15%)</field>
            <field name="sequence" eval="1" />
            <field name="code">HNI</field>
            <field name="account_debit" search="[('code', '=', '61011300')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_taxable_alw" />
            <field name="sequence">16</field>
            <field name="condition_select">python</field>
            <field name="condition_python">night_hours = inputs.HNI and inputs.HNI.amount
result = bool(night_hours)</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = ((contract.wage/23.83) / 8) / 8) * 1.15)
result_qty = night_hours
</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_bonuses" model="hr.salary.rule">
            <field name="name">Bonificación</field>
            <field name="sequence" eval="1" />
            <field name="code">BONOS</field>
            <field name="account_debit" search="[('code', '=', '61010500')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_taxable_alw" />
            <field name="sequence">17</field>
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.BONO and inputs.BONO.amount)</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = (inputs.BONO and inputs.BONO.amount)</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_not_worked_days" model="hr.salary.rule">
            <field name="name">Ausencias</field>
            <field name="sequence" eval="1" />
            <field name="code">NLAB</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_ss_deduction"/>
            <field name="sequence">11</field>
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.NLAB and inputs.NLAB.amount)</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = -(amount_to_pay / days_division)
result_qty = inputs.NLAB.amount
</field>

        </record>

        <record id="hr_payroll_hr_rule_taxable" model="hr.salary.rule">
            <field name="name">Salario Bruto</field>
            <field name="sequence" eval="1" />
            <field name="code">BRUTO</field>
            <field name="category_id" ref="hr_payroll.GROSS" />
            <field name="sequence">100</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = categories.SALARIO + abs(categories.OREM) + categories.INEX</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_tss_trading" model="hr.salary.rule">
            <field name="name">Salario Cotizable - TSS</field>
            <field name="sequence" eval="1" />
            <field name="code">COTSS</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_trading_salary" />
            <field name="sequence">100</field>
            <field name="amount_select">code</field>
             <field name="condition_select">python</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">
	
tss_playslip = categories.SALARIO
tss_allowance_accumulation = payslip.sum_category('SALARIO', start_date, this_slip)

if both_month or end_month:
    result = tss_playslip + tss_allowance_accumulation

elif start_month:
    tss_playslip = contract.wage
    result = tss_playslip
            </field>
            <field name="condition_python">result = bool(contract.deduction_plan) and not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary))</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_tss_calculated" model="hr.salary.rule">
            <field name="name">Monto Calculado - TSS</field>
            <field name="sequence" eval="1" />
            <field name="code">SALTSS</field>
            <field name="active">False</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_calculated_amount" />
            <field name="sequence">120</field>
            <field name="amount_select">code</field>
            <field name="condition_select">python</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
           <field name="condition_python">result = bool(contract.deduction_plan) and not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary))</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="amount_python_compute">
tss_playslip = categories.SALARIO
tss_allowance_accumulation = payslip.sum_category('SALARIO', start_date, this_slip)

if end_month:
    tss_playslip = tss_allowance_accumulation 
    result = tss_playslip 

if both_month:
    result = tss_playslip + tss_allowance_accumulation

elif start_month:
    tss_playslip = categories.SALARIO
    result = tss_playslip</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_sfs_employee" model="hr.salary.rule">
            <field name="name">Retención - Seguro Familiar de Salud (ARS/SFS)</field>
            <field name="sequence" eval="1" />
            <field name="code">SFSE</field>
            <field name="account_debit" search="[('code', '=', '21030402')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_ss_deduction" />
            <field name="sequence">130</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
 <field name="condition_python">result = not bool(contract.is_foreign) and (bool(both_month) or bool(last_payslip and end_month) or bool(first_payslip and start_month)) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
<!--             <field name="register_id" ref="l10n_do_hr_payroll.contrib_register_tss" /> -->
            <field name="amount_python_compute">
sfs_maximum = payslip.env["hr.payslip"].get_quotation_calculation("SFS").value
sfs_percentage = payslip.env["hr.payslip"].get_quotation_calculation("SFS").retention / 100

if end_month or start_month:
    sfs_withholding_accumulation =  0
if  both_month:
    sfs_withholding_accumulation =  abs(payslip.sum('SFSE', start_date, this_slip))

if COTSS &lt;=  sfs_maximum:
    result = (COTSS * sfs_percentage - sfs_withholding_accumulation) * -1
else:
    result = (sfs_maximum  * sfs_percentage - sfs_withholding_accumulation) * -1

            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_afp_employee" model="hr.salary.rule">
            <field name="name">Retención - Fondo de Pensiones (AFP/SVDS)</field>
            <field name="sequence" eval="1" />
            <field name="code">SVDSE</field>
            <field name="account_debit" search="[('code', '=', '21030403')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_ss_deduction" />
            <field name="sequence">140</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = not bool(contract.is_foreign) and  (bool(both_month) or bool(last_payslip and end_month) or bool(first_payslip and start_month)) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
<!--             <field name="register_id" ref="l10n_do_hr_payroll.contrib_register_tss" /> -->
            <field name="amount_python_compute">
afp_maximum = payslip.env["hr.payslip"].get_quotation_calculation("SVDS").value
afp_percentage = payslip.env["hr.payslip"].get_quotation_calculation("SVDS").retention / 100

if end_month or start_month:
    afp_withholding_accumulation =  0
if  both_month:
    afp_withholding_accumulation = abs(payslip.sum('SVDSE', start_date, this_slip))

if COTSS &lt;=  afp_maximum:
    result = (COTSS * afp_percentage - afp_withholding_accumulation) * -1
else:
    result = (afp_maximum * afp_percentage - afp_withholding_accumulation) * -1
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_insurance_dependent" model="hr.salary.rule">
            <field name="name">Dependientes Adicionales</field>
            <field name="sequence" eval="1" />
            <field name="code">DEPA</field>
            <field name="account_debit" search="[('code', '=', '21030402')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_ss_deduction" />
            <field name="sequence">145</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(len(employee.family_ids) &gt; 0) and (bool(both_month) or bool(last_payslip and end_month) or bool(first_payslip and start_month)) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">
result = 0
if employee.family_ids:
    dependant_withholding = 0
    for x in employee.family_ids:
        dependant_withholding+= x.amount_capita

    if both_month:
        result = (dependant_withholding / 2 ) * -1
        dependents = -  result
    elif last_payslip and end_month:
        result = dependant_withholding * -1
        dependents = -result

    elif first_payslip and start_month:
        result = dependant_withholding * -1
        dependents = -result
    result_qty = len(employee.family_ids) 
    result_rate = 100 / result_qty 
        
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_dgii_trading" model="hr.salary.rule">
            <field name="name">Salario Cotizable - DGII</field>
            <field name="sequence" eval="1" />
            <field name="code">COTDGII</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_trading_salary" />
            <field name="sequence">150</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(contract.deduction_plan) and not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">
dgii_amount = categories.SALARIO + categories.OREM - abs(categories.TSSE)
dgii_allowances_accumulation = payslip.sum_category('SALARIO', start_date, this_slip) + payslip.sum_category('OREM', start_date, this_slip) - abs(payslip.sum_category('TSSE', start_date, this_slip)) 

if both_month or end_month:
    result = dgii_amount + dgii_allowances_accumulation

elif start_month:
    dgii_amount = contract.wage + categories.OREM - abs(categories.TSSE)
    result = dgii_amount
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_dgii_calculated" model="hr.salary.rule">
            <field name="name">Monto Calculado - DGII</field>
            <field name="sequence" eval="1" />
            <field name="code">SALDGII</field>
            <field name="active">False</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_calculated_amount" />
            <field name="sequence">160</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = (bool(both_month) or bool(last_payslip and end_month) or bool(first_payslip and start_month)) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">
dgii_amount = categories.SALARIO + categories.OREM - abs(categories.TSSE)
dgii_allowances_accumulation = payslip.sum_category('SALARIO', start_date, this_slip) + payslip.sum_category('OREM', start_date, this_slip) - abs(payslip.sum_category('TSSE', start_date, this_slip))

if end_month:
    dgii_amount = dgii_allowances_accumulation 
    result = dgii_amount

if both_month:
    result = dgii_amount + dgii_allowances_accumulation

elif start_month:
    dgii_amount = BASIC + categories.OREM - abs(categories.TSSE)
    result = dgii_amount
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_isr_employee" model="hr.salary.rule">
            <field name="name">Retención - Impuesto sobre la Renta (ISR)</field>
            <field name="sequence" eval="1" />
            <field name="code">ISR</field>
            <field name="account_debit" search="[('code', '=', '21030401')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_income_deduction" />
            <field name="sequence">180</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">
if end_month or start_month:
    dgii_retention_accumulation  =  0
if  both_month:
    dgii_retention_accumulation = abs(payslip.sum('ISR', start_date, this_slip))

anual_minimum_salary = payslip.env["hr.payslip"].get_quotation_isr("exempt").top_amount

result = (True if rules.COTDGII and COTDGII * 12 > anual_minimum_salary else False) and (bool(both_month) or bool(last_payslip and end_month) or bool(first_payslip and start_month)) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))
            </field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">

if allow_accumulation:
    dgii_retention_accumulation = abs(payslip.sum('ISR', start_date, this_slip))
else:
    dgii_retention_accumulation = 0

salary = COTDGII * 12
minimum = anual_minimum_salary
first_scale = payslip.env["hr.payslip"].get_quotation_isr("ISR20").base_amount
second_scale = payslip.env["hr.payslip"].get_quotation_isr("ISR25").base_amount
first_plus = payslip.env["hr.payslip"].get_quotation_isr("ISR15").extra_amount
second_plus = payslip.env["hr.payslip"].get_quotation_isr("ISR20").extra_amount
income_tax = 0

if salary &lt;=  first_scale:
    surplus = salary - (minimum + .01)
    income_tax = surplus * 0.15

elif first_scale &#60; salary &lt;= second_scale:
    surplus = salary - (first_scale + .01)
    income_tax = first_plus + surplus * 0.20

elif salary > second_scale:
    surplus = salary - (second_scale + .01)
    income_tax = second_plus + surplus * 0.25

impuesto_isr = income_tax / 12 - dgii_retention_accumulation

if not allow_accumulation and payslip.date_to.day &gt;= 1 and payslip.date_to.day &lt;= 16:
    result = 0
else:
    result = -impuesto_isr
            </field>
        </record>
        <record id="l10n_do_hr_payroll.hr_rule_infotep_trading" model="hr.salary.rule">
            <field name="name">Salario Cotizable - INFOTEP</field>
            <field name="sequence" eval="1" />
            <field name="code">COTINF</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_trading_salary" />
            <field name="sequence">190</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(contract.deduction_plan) and not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">
infotep_payslip = categories.SALARIO
infotep_accumulation = payslip.sum_category('SALARIO', start_date, this_slip)

if both_month or end_month:
    result = infotep_payslip + infotep_accumulation

    if inputs.PVAC and inputs.PVAC.amount:
        result = infotep_payslip + infotep_accumulation - PVAC

elif start_month:
    infotep_payslip = contract.wage
    result = infotep_payslip
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_infotep_employee" model="hr.salary.rule">
            <field name="name">Retención - INFOTEP (Bonificación)</field>
            <field name="sequence" eval="1" />
            <field name="code">INFE</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_infotep_deduction" />
            <field name="sequence">210</field>
            <field name="account_debit" search="[('code', '=', '61010205')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">has_bonus = bool(inputs.BONO and inputs.BONO.amount)
bonus_accumulation = abs(payslip.sum('BONOS', start_date, this_slip))

contract_and_date = bool(last_payslip and end_month ) or bool(first_payslip and  start_month)

result =  bool(both_month and has_bonus) or bool(contract_and_date and (bonus_accumulation or has_bonus))
            </field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">
if end_month:
    result = -(BONOS - bonus_accumulation) * 0.005
elif end_month or both_month:
    result = -BONOS  * 0.005
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_sfs_contribution" model="hr.salary.rule">
            <field name="name">Contribución - Seguro Familiar de Salud (SFS)</field>
            <field name="sequence" eval="1" />
            <field name="code">SFSC</field>
            <field name="account_debit" search="[('code', '=', '61010104')]"/>
            <field name="account_credit" search="[('code', '=', '21021100')]"/>
            <field name="category_id" ref="hr_payroll.COMP" />
            <field name="sequence">300</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(contract.deduction_plan) and not bool(contract.is_foreign) and (bool(both_month) or bool(last_payslip and end_month) or bool(first_payslip and start_month)) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">sfs_maximum = payslip.env["hr.payslip"].get_quotation_calculation("SFS").value
sfs_percentage = payslip.env["hr.payslip"].get_quotation_calculation(
    "SFS").contrib / 100

if COTSS &lt;= sfs_maximum:
    result = COTSS * sfs_percentage
else:
    result = sfs_maximum * sfs_percentage
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_afp_contribution" model="hr.salary.rule">
            <field name="name">Contribución - Fondo de Pensiones (AFP/SVDS)</field>
            <field name="sequence" eval="1" />
            <field name="code">SVDSC</field>
            <field name="account_debit" search="[('code', '=', '61010102')]"/>
            <field name="account_credit" search="[('code', '=', '21021100')]"/>
            <field name="category_id" ref="hr_payroll.COMP" />
            <field name="sequence">310</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(contract.deduction_plan) and not bool(contract.is_foreign) and  (bool(both_month) or bool(last_payslip and end_month) or bool(first_payslip and start_month)) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">
afp_maximum = payslip.env["hr.payslip"].get_quotation_calculation("SVDS").value
afp_percentage = payslip.env["hr.payslip"].get_quotation_calculation(
    "SVDS").contrib / 100
if COTSS &lt;= afp_maximum:
    result = COTSS * afp_percentage
else:
    result = afp_maximum * afp_percentage
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_srl_contribution" model="hr.salary.rule">
            <field name="name">Contribución - Seguro de Riesgos Laborales (SRL)</field>
            <field name="sequence" eval="1" />
            <field name="code">SRLC</field>
            <field name="account_debit" search="[('code', '=', '61010103')]"/>
            <field name="account_credit" search="[('code', '=', '21021100')]"/>
            <field name="category_id" ref="hr_payroll.COMP" />
            <field name="sequence">320</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(contract.deduction_plan) and bool((both_month) or bool(last_payslip and end_month) or bool(first_payslip and start_month)) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
             <field name="amount_python_compute">srl_maximum = payslip.env["hr.payslip"].get_quotation_calculation("SRL").value
srl_variable_percentage = payslip.env["hr.payslip"].get_quotation_calculation(
    "SRL").contrib / 100
if COTSS &lt;= srl_maximum:
    result = COTSS * srl_variable_percentage
else:
    result = srl_maximum * srl_variable_percentage
        </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_infotep_contribution" model="hr.salary.rule">
            <field name="name">Contribución - INFOTEP</field>
            <field name="sequence" eval="1" />
            <field name="account_debit" search="[('code', '=', '61010205')]"/>
            <field name="account_credit" search="[('code', '=', '21021000')]"/>
            <field name="code">INFC</field>
            <field name="category_id" ref="hr_payroll.COMP" />
            <field name="sequence">340</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(contract.deduction_plan) and bool((both_month) or bool(last_payslip and end_month) or bool(first_payslip and start_month)) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
<!--             <field name="register_id" ref="l10n_do_hr_payroll.contrib_register_infotep" /> -->
            <field name="amount_python_compute">result = COTINF * 0.01</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_dgii_exempt" model="hr.salary.rule">
            <field name="name">Ingresos Exentos</field>
            <field name="sequence" eval="1" />
            <field name="code">INEX</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_exempt_alw" />
            <field name="sequence">350</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.INEX and inputs.INEX.amount)</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
<!--             <field name="register_id" ref="l10n_do_hr_payroll.contrib_register_infotep" /> -->
            <field name="amount_python_compute">result = inputs.INEX and inputs.INEX.amount</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_employee_refund" model="hr.salary.rule">
            <field name="name">Reembolsos</field>
            <field name="sequence" eval="1" />
            <field name="code">REEM</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_exempt_alw" />
            <field name="sequence">351</field>
            <field name="account_debit" search="[('code', '=', '21010600')]"/>
            <field name="account_credit" search="[('code', '=', '21030401')]"/>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="condition_python">result = bool(inputs.REEM and inputs.REEM.amount)</field>
            <field name="amount_python_compute">result = inputs.REEM and inputs.REEM.amount</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_isr_employee_credit" model="hr.salary.rule">
            <field name="name">Saldo a Favor del ISR</field>
            <field name="sequence" eval="1" />
            <field name="code">ISRCRED</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_exempt_alw" />
            <field name="sequence">400</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="condition_python">result = bool(inputs.ISRCRED and inputs.ISRCRED.amount)</field>
            <field name="amount_python_compute">result = inputs.ISRCRED and inputs.ISRCRED.amount</field>
        </record>
        
        <record id="l10n_do_hr_payroll.hr_rule_christmas_bonus" model="hr.salary.rule">
            <field name="name">Regalía Pascual</field>
            <field name="sequence" eval="1" />
            <field name="code">REPA</field>
            <field name="account_debit" search="[('code', '=', '61010200')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_exempt_alw" />
            <field name="sequence">92</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
           <field name="condition_python">result = (bool(inputs.REPA and inputs.REPA.amount)) or (bool(payslip.date_to.month == 12))</field>
           <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = inputs.REPA and inputs.REPA.amount</field>
        </record>

        
        <record id="l10n_do_hr_payroll.hr_rule_pre_warning" model="hr.salary.rule">
            <field name="name">Pre-aviso</field>
            <field name="sequence" eval="1" />
            <field name="code">PREA</field>
            <field name="account_debit" search="[('code', '=', '61011100')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_exempt_alw" />
            <field name="sequence">493</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.PREA and inputs.PREA.amount)</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_out"/>
            <field name="amount_python_compute">result = (inputs.PREA and inputs.PREA.amount)</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_insurance_complementary" model="hr.salary.rule">
            <field name="name">Seguro Complementario</field>
            <field name="sequence" eval="1" />
            <field name="code">SEC</field>
            <field name="account_debit" search="[('code', '=', '11030202')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_other_deduction" />
            <field name="sequence">493</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
             <field name="condition_python">result = bool(inputs.CESA and inputs.CESA.amount) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = -(inputs.SEC and inputs.SEC.amount)</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_severance_pay" model="hr.salary.rule">
            <field name="name">Cesantía</field>
            <field name="sequence" eval="1" />
            <field name="code">CESAN</field>
            <field name="account_debit" search="[('code', '=', '61011100')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_exempt_alw" />
            <field name="sequence">494</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
           <field name="condition_python">result = bool(inputs.CESA and inputs.CESA.amount) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_out"/>
            <field name="amount_python_compute">result = -(inputs.CESA and inputs.CESA.amount)</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_insurance_live" model="hr.salary.rule">
            <field name="name">Seguro de Vida</field>
            <field name="sequence" eval="1" />
            <field name="code">SEV</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_other_deduction" />
            <field name="sequence">440</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.SEV and inputs.SEV.amount) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = -(inputs.SEV and inputs.SEV.amount)</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_employee_exit" model="hr.salary.rule">
            <field name="name">Prestaciones</field>
            <field name="sequence" eval="1" />
            <field name="code">SALIDA</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_exempt_alw" />
            <field name="sequence">495</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_out"/>
            <field name="amount_python_compute">employee_exit = REPA + PREA + CESAN + ISRCRED
benefits_accumulation = payslip.sum('REPA', start_date, this_slip) + payslip.sum('PREA', start_date, this_slip) + \
    payslip.sum('CESAN', start_date, this_slip) + \
    payslip.sum('ISRCRED', start_date, this_slip)

if end_month:
    result = employee_exit + benefits_accumulation
elif both_month or start_month:
    result = employee_exit
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_employee_loan" model="hr.salary.rule">
            <field name="name">Préstamos</field>
            <field name="sequence" eval="1" />
            
            <field name="code">PRE</field>
            <field name="account_debit" search="[('code', '=', '11030202')]"/>
            <field name="account_credit" search="[('code', '=', '21010600')]"/>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_loan_deduction" />
            <field name="sequence">450</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.PRE and inputs.PRE.amount) and (not payslip.payslip_run_id or (payslip.payslip_run_id and not bool(payslip.payslip_run_id.is_christmas_salary)))</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = -(inputs.PRE and inputs.PRE.amount)</field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_coop_loan" model="hr.salary.rule">
            <field name="name">Cooperativa - Préstamo</field>
            <field name="sequence" eval="1" />
            <field name="code">COOP</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_loan_deduction" />
            <field name="sequence">451</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.COOP and inputs.COOP.amount) and not bool(payslip.payslip_run_id and payslip.payslip_run_id.is_christmas_salary)</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = -(inputs.COOP and inputs.COOP.amount)
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_coop_savings" model="hr.salary.rule">
            <field name="name">Cooperativa - Ahorro</field>
            <field name="sequence" eval="1" />
            <field name="code">COOA</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_loan_deduction" />
            <field name="sequence">451</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.COOA and inputs.COOA.amount) and not bool(payslip.payslip_run_id and payslip.payslip_run_id.is_christmas_salary)</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = -(inputs.COOA and inputs.COOA.amount)
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_employee_gas" model="hr.salary.rule">
            <field name="name">Combustible</field>
            <field name="sequence" eval="1" />
            <field name="code">COMB</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_taxable_alw" />
            <field name="sequence">98</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.COMB and inputs.COMB.amount)</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = (inputs.COMB and inputs.COMB.amount)
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_employee_food" model="hr.salary.rule">
            <field name="name">Almuerzo</field>
            <field name="sequence" eval="1" />
            <field name="code">ALM</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_taxable_alw" />
            <field name="sequence">99</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = (inputs.ALM and inputs.ALM.amount) and not bool(payslip.payslip_run_id.is_christmas_salary)</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = (inputs.ALM and inputs.ALM.amount)
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_employee_uniform" model="hr.salary.rule">
            <field name="name">Uniformes</field>
            <field name="sequence" eval="1" />
            <field name="code">UNIF</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_other_deduction" />
            <field name="sequence">460</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = -(inputs.UNIF and inputs.UNIF.amount)</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = -(inputs.UNIF and inputs.UNIF.amount)
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_employee_unbalance" model="hr.salary.rule">
            <field name="name">Faltante en Caja</field>
            <field name="sequence" eval="1" />
            <field name="code">CAJA</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_other_deduction" />
            <field name="sequence">470</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = bool(inputs.CAJA and inputs.CAJA.amount)</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = -(inputs.CAJA and inputs.CAJA.amount)
            </field>
        </record>

        <record id="l10n_do_hr_payroll.hr_rule_employee_other" model="hr.salary.rule">
            <field name="name">Otras Deducciones</field>
            <field name="sequence" eval="1" />
            <field name="code">DDSL</field>
            <field name="category_id" ref="l10n_do_hr_payroll.hr_payroll_other_deduction" />
            <field name="sequence">490</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">python</field>
            <field name="condition_python">result = -(inputs.DDSL and inputs.DDSL.amount)</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">result = -(inputs.DDSL and inputs.DDSL.amount)
            </field>
        </record>

        <record id="hr_payroll_hr_rule_net" model="hr.salary.rule">
            <field name="name">Salario Neto</field>
            <field name="sequence" eval="1" />
            <field name="code">NET</field>
            <field name="category_id" ref="hr_payroll.NET" />
            <field name="sequence">500</field>
            <field name="amount_select">code</field>
            <field name="appears_on_payslip" eval="True" />
            <field name="condition_select">none</field>
            <field name="struct_id" ref="l10n_do_hr_payroll.hr_payroll_structure_base"/>
            <field name="amount_python_compute">
result = (BRUTO if rules.BRUTO else 0) - abs(categories.RET) - abs(categories.DED) + abs(categories.INEX)
            </field>
        </record>

    </data>
</odoo>